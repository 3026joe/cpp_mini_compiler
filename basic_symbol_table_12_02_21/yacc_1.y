%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include "sym_tab.c"
	extern FILE *yyin;
	extern FILE *yyout;
	extern int yylex();
	void yyerror();
%}

%token T_RETURN T_MAIN T_WHILE T_COUT T_CIN T_ENDL T_BREAK T_CONTINUE T_SWITCH T_CASE T_DEFAULT T_INT T_FLOAT T_DOUBLE T_CHAR T_VOID T_CLASS T_STRUCT T_SIZEOF T_PUBLIC T_PRIVATE T_PROTECTED T_GOTO T_UNSIGNED T_SHORT T_INCLUDE T_DEFINE T_NUM T_ID T_HEADER T_STRINGLITERAL T_LESSERTHAN T_GREATERTHAN T_ASSIGNMENT T_LESSTHANEQUALTO T_GREATERTHANEQUALTO T_EQUALTO T_NOTEQUALTO T_PLUS T_MINUS T_MULTIPLY T_DIVIDE T_INCREMENT T_DECREMENT T_NOT T_OR T_AND T_MODULUS T_COMMA T_DOT T_OPENSQUAREBRACKET T_CLOSESQUAREBRACKET T_DIMENSIONS T_PARENTHESES T_CURLYBRACES T_OPENCURLYBRACES T_CLOSECURLYBRACES T_OPENPARENTHESIS T_CLOSEPARENTHESIS

%start PROG

%%

PROG
	: T_INCLUDE INC
	| T_DEFINE T_ID DEF
	| T_CLASS T_ID '{' CLASS_BODY '}' OBJ_DEF ';'
    | STRUCT_UNION T_ID '{' STMT '}' OBJ_DEF ';'
    | T_ENUM T_ID '{' LISTVAR '}' OBJ_DEF ';'
	| FUNC_DECLR PROG
	| MAIN PROG
	| GLOBAL PROG
	;
STRUCT_UNION
    : STRUCT
    | UNION
    ;
CLASS_BODY
    : CLASS_LABEL
    | STMT
    ;
OBJ_DEF
    : T_ID 
    | EMPTY
    ;
CLASS_LABEL
    : T_PRIVATE ':'
    | T_PUBLIC ':'
    | T_PROTECTED ':'
    ;
INC
    : T_LESSERTHAN T_HEADER T_GREATERTHAN PROG
    | '"' T_HEADER '"' PROG
    ;
DEF
    : T_NUM
    | T_STRINGLITERAL
    ;
GLOBAL
	: DECLR ';'
	| ASSGN ';'
	;
FUNC_DECLR
	: TYPE T_ID T_OPENPARENTHESIS EMPTY_LISTVAR T_CLOSEPARENTHESIS FUNC_DECLR2
	;
FUNC_DECLR2
    : T_OPENCURLYBRACES STMT T_CLOSECURLYBRACES
    | ';'
    ;
MAIN
	: TYPE T_MAIN T_OPENPARENTHESIS EMPTY_LISTVAR T_CLOSEPARENTHESIS T_OPENCURLYBRACES STMT T_CLOSECURLYBRACES
	;
STMT
	: DECLR ';' STMT
	| ASSGN ';' STMT
	| WHILE
	| SWITCH
	| T_COUT COUT ';' STMT
	| T_CIN CIN ';' STMT
	| T_RETURN ';' STMT
	| T_OPENCURLYBRACES STMT T_CLOSECURLYBRACES
	| EMPTY
	;
SWITCH
	: T_SWITCH T_OPENPARENTHESIS SWITCH2
	;
SWITCH2
    : EXPR T_CLOSEPARENTHESIS SWT_BLOCK
    | ASSGN T_CLOSEPARENTHESIS SWT_BLOCK
    ;
SWT_BLOCK
	: STMT
	| T_CASE CASE
	| T_DEFAULT ';' STMT
	;
CASE
    : T_ID ':' STMT BREAK CASE2
    | T_NUM ':' STMT BREAK CASE2
    ;
CASE2
    : T_CASE CASE ':'
    | EMPTY
    ;
BREAK
	: T_BREAK
	| EMPTY
	;
WHILE
	: T_WHILE T_OPENPARENTHESIS WHILE2
	;
WHILE2
    : EXPR T_CLOSEPARENTHESIS WHILE3
    | ASSGN T_CLOSEPARENTHESIS WHILE4
    ;
WHILE3
    : BLOCK STMT
    | T_OPENCURLYBRACES STMT T_CLOSECURLYBRACES STMT
    ;
WHILE4
    : BLOCK STMT
    | T_OPENCURLYBRACES STMT T_CLOSECURLYBRACES STMT
    ;
BLOCK
	: DECLR ';'
	| ASSGN ';'
	| WHILE
	| SWITCH
	| T_COUT COUT ';'
	| T_CIN CIN ';'
	| T_RETURN ';'
	;
COUT
	: T_LESSERTHAN T_LESSERTHAN COUT2
	| EMPTY
	;
COUT2
    : T_STRINGLITERAL COUT
    | T_ID COUT
    ;
CIN
	: T_GREATERTHAN T_GREATERTHAN T_ID CIN
	| EMPTY
	;
DECLR
	: PREFIX_TYPE TYPE LISTVAR ';'
	;
PREFIX_TYPE
    : T_STATIC
    | T_UNSIGNED
    | EMPTY
    ;
TYPE
	: T_VOID
	| T_INT
	| T_FLOAT
	| T_CHAR
	| T_DOUBLE
	| T_SHORT
	;
EMPTY_LISTVAR
    : VAR LISTVAR2
    | EMPTY
    ;
LISTVAR
	: VAR LISTVAR2
	;
LISTVAR2
    : ',' VAR LISTVAR2
    | EMPTY
    ;
VAR
	: T_ID ARRAY2
	| ASSGN
	;
ASSGN
	: T_ID T_ASSIGNMENT EXPR
    | T_ID ARRAY T_ASSIGNMENT T_OPENCURLYBRACES H T_CLOSECURLYBRACES
	;
ARRAY
    : T_OPENSQUAREBRACKET T_CLOSESQUAREBRACKET ARRAY2
    | ARRAY2
    ;
ARRAY2
    : T_OPENSQUAREBRACKET ARRAYSIZE T_CLOSESQUAREBRACKET ARRAY2
    | EMPTY
    ;
EXPR
	: T EXPR1
	;
EXPR1
	: REL_OP T EXPR1
	| EMPTY
	;
T
	: F EXPR2
	;
EXPR2
	: T_PLUS F EXPR2
	| T_MINUS F EXPR2
	| EMPTY
	;
F
	: G EXPR3
	;
EXPR3
	: T_MULTIPLY G EXPR3
	| T_DIVIDE G EXPR3
	| T_MODULUS G EXPR3
	| EMPTY
	;
G
	: UNARY_EXPR
	| T_OPENPARENTHESIS EXPR T_CLOSEPARENTHESIS
	| T_ID
	| T_NUM
	;
H
    : J I
    : T_STRINGLITERAL I
    ;
I
    : ',' J I
    | ',' T_STRINGLITERAL I
    | EMPTY
    ;
J
	: UNARY_EXPR
	| T_OPENPARENTHESIS EXPR T_CLOSEPARENTHESIS
	| T_ID
	| T_NUM
    | '\'' G '\''
    ;
REL_OP
	: T_LESSERTHAN
	| T_GREATERTHAN
	| T_LESSTHANEQUALTO
	| T_GREATERTHANEQUALTO
	| T_EQUALTO
	| T_NOTEQUALTO
	;
UNARY_EXPR
	: T_INCREMENT T_ID
	| T_DECREMENT T_ID
	| T_ID T_INCREMENT
	| T_ID T_DECREMENT
	;
EMPTY
	:
	;

%%
int main (int argc, char *argv[]){

	// initialize symbol table
	t = init_table();

	// parsing
	yyin = fopen(argv[1], "r");
	yylex();
	fclose(yyin);
	
	printf("Parsing finished!");
	
	// symbol table dump
	display_sym_tab();
}